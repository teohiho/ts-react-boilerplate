'use strict';

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', err => {
	throw err;
});

const { settingEnv } = require('../conf/env')

// Load env by default
settingEnv()

const fs = require('fs');
const {
	choosePort,
	createCompiler,
	prepareProxy,
	prepareUrls,
} = require('react-dev-utils/WebpackDevServerUtils');
const openBrowser = require('react-dev-utils/openBrowser');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const { config } = require('../conf/webpack.dev.js')
const pureConfig = require('../config/webpack.config.dev')
const { appPath } = require('../conf/path.js')
const chalk = require('chalk');

const createDevServerConfig = require('../conf/webpackDevServer')
// const createDevServerConfig =  require('../config/webpackDevServer.config');
const { getConfiguration } = require('../conf/helper/variable')

const useYarn = fs.existsSync(appPath.yarnLockFile);
const configGlobal = getConfiguration()
choosePort(configGlobal.host, configGlobal.port)
	.then(port => {
		if (port == null) {
			// We have not found a port.
			return;
		}
		const protocol = configGlobal.protocol; //http or https
		const appName = require(appPath.appPackageJson).name;
		const urls = prepareUrls(protocol, configGlobal.host, port);
		const compiler = createCompiler(webpack, config(), appName, urls, useYarn);

		// Load proxy config
		const proxySetting = require(appPath.appPackageJson).proxy;
		const proxyConfig = prepareProxy(proxySetting, appPath.appPublic);
		
		// Serve webpack assets generated by the compiler over a web sever.
		const serverConfig = createDevServerConfig(
			proxyConfig,
			urls.lanUrlForConfig
		);
		const devServer = new WebpackDevServer(compiler, serverConfig);

		devServer.listen(port, configGlobal.host, err => {
			if (err) {
			  return console.log(err);
			}
			// if (isInteractive) {
			//   clearConsole();
			// }
			console.log(chalk.cyan('Starting the development server...\n'));
			openBrowser(urls.localUrlForBrowser);
		});
		['SIGINT', 'SIGTERM'].forEach(function(sig) {
			process.on(sig, function() {
				devServer.close();
				process.exit();
			});
		});
	})
	.catch(err => {
		if (err && err.message) {
			console.log('log from catch')
			console.log(err.message);
		}
		process.exit(1);
	});
	

